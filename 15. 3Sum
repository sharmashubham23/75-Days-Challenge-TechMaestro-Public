//Question link: https://leetcode.com/problems/3sum/

class pair{
    int i1, i2, i3;
    
    pair(int n1, int n2, int n3){
        i1 = n1;
        i2 = n2;
        i3 = n3;
    }
}
class Solution {
    public List<List<Integer>> threeSum(int[] num) {
    Arrays.sort(num);
    List<List<Integer>> res = new LinkedList<>(); 
    for (int i = 0; i < num.length-2; i++) {
        if (i == 0 || (i > 0 && num[i] != num[i-1])) {
            int lo = i+1, hi = num.length-1, sum = 0 - num[i];
            while (lo < hi) {
                if (num[lo] + num[hi] == sum) {
                    res.add(Arrays.asList(num[i], num[lo], num[hi]));
                    while (lo < hi && num[lo] == num[lo+1]) lo++;
                    while (lo < hi && num[hi] == num[hi-1]) hi--;
                    lo++; hi--;
                } else if (num[lo] + num[hi] < sum) lo++;
                else hi--;
           }
        }
    }
    return res;
    }
}

//Runtime: 15 ms, faster than 99.87% of Java online submissions for 3Sum.
//Memory Usage: 46.8 MB, less than 82.55% of Java online submissions for 3Sum.
